// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.6.1
// source: src/protocol/price.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PriceServiceClient is the client API for PriceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PriceServiceClient interface {
	SendPrice(ctx context.Context, in *Conn, opts ...grpc.CallOption) (PriceService_SendPriceClient, error)
	SendPosNewPrice(ctx context.Context, in *Conn, opts ...grpc.CallOption) (PriceService_SendPosNewPriceClient, error)
	ValidateSymbolPrice(ctx context.Context, in *Price, opts ...grpc.CallOption) (*ValidResponse, error)
}

type priceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPriceServiceClient(cc grpc.ClientConnInterface) PriceServiceClient {
	return &priceServiceClient{cc}
}

func (c *priceServiceClient) SendPrice(ctx context.Context, in *Conn, opts ...grpc.CallOption) (PriceService_SendPriceClient, error) {
	stream, err := c.cc.NewStream(ctx, &PriceService_ServiceDesc.Streams[0], "/protocol.PriceService/SendPrice", opts...)
	if err != nil {
		return nil, err
	}
	x := &priceServiceSendPriceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PriceService_SendPriceClient interface {
	Recv() (*Price, error)
	grpc.ClientStream
}

type priceServiceSendPriceClient struct {
	grpc.ClientStream
}

func (x *priceServiceSendPriceClient) Recv() (*Price, error) {
	m := new(Price)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *priceServiceClient) SendPosNewPrice(ctx context.Context, in *Conn, opts ...grpc.CallOption) (PriceService_SendPosNewPriceClient, error) {
	stream, err := c.cc.NewStream(ctx, &PriceService_ServiceDesc.Streams[1], "/protocol.PriceService/SendPosNewPrice", opts...)
	if err != nil {
		return nil, err
	}
	x := &priceServiceSendPosNewPriceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PriceService_SendPosNewPriceClient interface {
	Recv() (*Price, error)
	grpc.ClientStream
}

type priceServiceSendPosNewPriceClient struct {
	grpc.ClientStream
}

func (x *priceServiceSendPosNewPriceClient) Recv() (*Price, error) {
	m := new(Price)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *priceServiceClient) ValidateSymbolPrice(ctx context.Context, in *Price, opts ...grpc.CallOption) (*ValidResponse, error) {
	out := new(ValidResponse)
	err := c.cc.Invoke(ctx, "/protocol.PriceService/ValidateSymbolPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PriceServiceServer is the server API for PriceService service.
// All implementations must embed UnimplementedPriceServiceServer
// for forward compatibility
type PriceServiceServer interface {
	SendPrice(*Conn, PriceService_SendPriceServer) error
	SendPosNewPrice(*Conn, PriceService_SendPosNewPriceServer) error
	ValidateSymbolPrice(context.Context, *Price) (*ValidResponse, error)
	mustEmbedUnimplementedPriceServiceServer()
}

// UnimplementedPriceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPriceServiceServer struct {
}

func (UnimplementedPriceServiceServer) SendPrice(*Conn, PriceService_SendPriceServer) error {
	return status.Errorf(codes.Unimplemented, "method SendPrice not implemented")
}
func (UnimplementedPriceServiceServer) SendPosNewPrice(*Conn, PriceService_SendPosNewPriceServer) error {
	return status.Errorf(codes.Unimplemented, "method SendPosNewPrice not implemented")
}
func (UnimplementedPriceServiceServer) ValidateSymbolPrice(context.Context, *Price) (*ValidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSymbolPrice not implemented")
}
func (UnimplementedPriceServiceServer) mustEmbedUnimplementedPriceServiceServer() {}

// UnsafePriceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PriceServiceServer will
// result in compilation errors.
type UnsafePriceServiceServer interface {
	mustEmbedUnimplementedPriceServiceServer()
}

func RegisterPriceServiceServer(s grpc.ServiceRegistrar, srv PriceServiceServer) {
	s.RegisterService(&PriceService_ServiceDesc, srv)
}

func _PriceService_SendPrice_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Conn)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PriceServiceServer).SendPrice(m, &priceServiceSendPriceServer{stream})
}

type PriceService_SendPriceServer interface {
	Send(*Price) error
	grpc.ServerStream
}

type priceServiceSendPriceServer struct {
	grpc.ServerStream
}

func (x *priceServiceSendPriceServer) Send(m *Price) error {
	return x.ServerStream.SendMsg(m)
}

func _PriceService_SendPosNewPrice_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Conn)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PriceServiceServer).SendPosNewPrice(m, &priceServiceSendPosNewPriceServer{stream})
}

type PriceService_SendPosNewPriceServer interface {
	Send(*Price) error
	grpc.ServerStream
}

type priceServiceSendPosNewPriceServer struct {
	grpc.ServerStream
}

func (x *priceServiceSendPosNewPriceServer) Send(m *Price) error {
	return x.ServerStream.SendMsg(m)
}

func _PriceService_ValidateSymbolPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Price)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceServiceServer).ValidateSymbolPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.PriceService/ValidateSymbolPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceServiceServer).ValidateSymbolPrice(ctx, req.(*Price))
	}
	return interceptor(ctx, in, info, handler)
}

// PriceService_ServiceDesc is the grpc.ServiceDesc for PriceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PriceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.PriceService",
	HandlerType: (*PriceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateSymbolPrice",
			Handler:    _PriceService_ValidateSymbolPrice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendPrice",
			Handler:       _PriceService_SendPrice_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendPosNewPrice",
			Handler:       _PriceService_SendPosNewPrice_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "src/protocol/price.proto",
}
